<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SX-Aurora TSUBASA</title>
    <link>https://sx-aurora-dev.github.io/blog/</link>
    <description>Recent content on SX-Aurora TSUBASA</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 06 Apr 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sx-aurora-dev.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VE Intrinsics Tutorial</title>
      <link>https://sx-aurora-dev.github.io/blog/post/20210406-ve-intrinsics-tutorial/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/20210406-ve-intrinsics-tutorial/</guid>
      <description>See VE Intrinsics Tutorial.
Welcome your feedback. Please post to Issues, or send PR.
Let&amp;rsquo;s enjoy high performance programing with VE intrinsics.</description>
    </item>
    
    <item>
      <title>Inastemp supports SX-Aurora Vector Engine</title>
      <link>https://sx-aurora-dev.github.io/blog/post/20200513-inastemp/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/20200513-inastemp/</guid>
      <description>Inastemp, intrinsics as template, is a basic library to use vectorization easily in C++ thanks to template and Intrinsics. Now it supports vector intrinsics for Vector Engine provided by llvm-ve, in addition to intrinsics for X86 SSE/AVX/AVX512, PowerPC ALTIVEC, ARM SVE.
With inastemp, you can write highily vectorized code by using C++ template without writing intrinsics directory. It means that you don&amp;rsquo;t have to learn platform-specific intrinsics and your code runs on various platforms.</description>
    </item>
    
    <item>
      <title>How to use SX-Aurora TSUBASA</title>
      <link>https://sx-aurora-dev.github.io/blog/post/20190918-aurora/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/20190918-aurora/</guid>
      <description>If you are interested in to use SX-Aurora TSUBASA, please use contact form in https://www.nec.com/en/global/solutions/hpc/.</description>
    </item>
    
    <item>
      <title>Update TensorFlow for SX-Aurora</title>
      <link>https://sx-aurora-dev.github.io/blog/post/20191218-tf/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/20191218-tf/</guid>
      <description>We have updated tensorflow-ve, Tensorflow with SX-Aurora TSUBASA Vector Engine Support. Now it supports tf 2.0 API! We release the prebuilt package. See README_ve.md for install instructions.
Tensorflow-ve supports VectorEngine(VE) as a offload device such as GPU. That means our TF is VE-aware, for example you can see kernels run on VE and data transfer between CPU and VE on a standard profiler in tensorboard.
And our TF includes some kernels that run on VE.</description>
    </item>
    
    <item>
      <title>Deep Reinforcement Learning on SX-Aurora</title>
      <link>https://sx-aurora-dev.github.io/blog/post/20191007-dqn/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/20191007-dqn/</guid>
      <description>wellvill Co.,Ltd. has evaluated their deep reinforcement learning algorithm on SX-Aurora&amp;rsquo;s Vector Engine. The result is very impressive. SX-Aurora outperforms GPU(P100) system about two times.
Their algorithm is based on &amp;ldquo;dueling double DQN&amp;rdquo; and solves 3D bin packing problems such as packing multiple products in boxes in a logistics center, loading packages into a truck, etc.
Since they are using TensorFlow, it can run on VE with TensorFlow for VE without special modification.</description>
    </item>
    
    <item>
      <title>Release LLVM-VE 1.5.0</title>
      <link>https://sx-aurora-dev.github.io/blog/post/20190829-llvm-1.5.0/</link>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/20190829-llvm-1.5.0/</guid>
      <description>We have released LLVM-VE 1.5.0. From this release we have shifted to the mono repo as the official LLVM. The compiler is idential with LLVM-VE 1.4.0.
It can be installed from ef_extra repository.
% yum install https://sx-aurora.com/repos/veos/ef_extra/x86_64/llvm-ve-link-1.5.0-1.x86_64.rpm \ https://sx-aurora.</description>
    </item>
    
    <item>
      <title>Release llvm-ve-1.3.0</title>
      <link>https://sx-aurora-dev.github.io/blog/post/20190722-llvm-ve-1.3.0/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/20190722-llvm-ve-1.3.0/</guid>
      <description>We have released LLVM-VE 1.3.0. The rpm packages are avaible.
% yum install https://sx-aurora.com/repos/veos/ef_extra/x86_64/llvm-ve-link-1.3.0-1.x86_64.rpm \ https://sx-aurora.com/repos/veos/ef_extra/x86_64/llvm-ve-1.3.0-1.3.0-1.x86_64.rpm This release adds some intrinsic functions.
 _vel_andm_MMMl, etc _vel_insert/extract_vm512l/u _vel_approx_* _vel_pvfmk*  Full function list is available at https://sx-aurora-dev.github.io/velintrin.html.</description>
    </item>
    
    <item>
      <title>Performance of TensorFlow on SX-Aurora</title>
      <link>https://sx-aurora-dev.github.io/blog/post/20190708-tf-perf/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/20190708-tf-perf/</guid>
      <description>We are investigating how SX-Aurora works on variouse ML applications. In this post, we would like to share the result of performance evaluation of three ML workloads using TensorFlow.
The graphs show relative performance of training on CPU, GPU and VE in SX-Aurora.
The left graph is simple CNN for image classification based on the example in Keras. We have used mnist dataset. As you know, GPU&amp;rsquo;s high peak computational performance works well for convolution layers, then V100 is the best.</description>
    </item>
    
    <item>
      <title>Release TensorFlow for SX-Aurora</title>
      <link>https://sx-aurora-dev.github.io/blog/post/20190605-tf-release/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/20190605-tf-release/</guid>
      <description>We are pleased to announce the release of TensorFlow for SX-Aurora. This TF supports Vector Engin in SX-Aurora as a computing device. We have implemented some kernels for VE. Such kenrels are offloaded to VE for acceleration.
We have also released:
 keras includes small modification for VE, vetfkernel includes implemetation of kernels for VE, and vednn is Vector Engine DNN Library.  You can pip install prebuild packages to start to use TF on SX-Aurora.</description>
    </item>
    
    <item>
      <title>LLVM-VE rpm package</title>
      <link>https://sx-aurora-dev.github.io/blog/post/2019-05-22-llvm-rpm/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/2019-05-22-llvm-rpm/</guid>
      <description>As we mentioned in the past post, the rpm package for llvm-ve is now available on VEOS yum Repository on the Web.
You can install llvm-ve:
% yum install https://sx-aurora.com/repos/veos/ef_extra/x86_64/llvm-ve-1.1.0-1.1.0-1.x86_64.rpm \ https://sx-aurora.com/repos/veos/ef_extra/x86_64/llvm-ve-link-1.1.0-1.x86_64.rpm The llvm-ve package is all in one package that includes llvm, clang and runtimes. Files are installed into /opt/nec/nosupport/llvm-ve-1.1.0. The llvm-ve-link makes a symlink from /opt/nec/nosupport/llvm-ve to there.
You can compile your program like this.
% /opt/nec/nosupport/llvm-ve/bin/clang -target ve-linux hello.</description>
    </item>
    
    <item>
      <title>Ansible for Aurora</title>
      <link>https://sx-aurora-dev.github.io/blog/post/2019-05-21-ansible/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/2019-05-21-ansible/</guid>
      <description>NEC provides RPM packages for SX-Aurora. If you feel its intallation is weird or not standard, visit VEOS yum Repository on the Web. Yes, yum repository for SX-Aurora is available!
And we have created ansible scripts to setup SX-Aurora using this yum repository. You can setup Aurora by few commands.
Instructions  Install CentOS7.5. Clone https://github.com/sx-aurora-dev/aurora-ansible. Write inventory file for ansible. Run ansible-playbook -i hosts.yaml -u root -k playbooks/aurora.yaml to install VEOS.</description>
    </item>
    
    <item>
      <title>Faster data transfer by VE DMA</title>
      <link>https://sx-aurora-dev.github.io/blog/post/2019-05-20-vedma/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/2019-05-20-vedma/</guid>
      <description>On VE, you can use usual read(2) and write(2) to accesse file system or to transfer data through socket. But its speed is about 1GB/s at maximum in our experience. When we want to accelerate data transfer between VE and CPU, we use VE DMA. Since VE DMA has its own API for DMA, we have to rewrite a program. But we can reach 10GB/s.
Here is the result of our experiment.</description>
    </item>
    
    <item>
      <title>Release LLVM for VE</title>
      <link>https://sx-aurora-dev.github.io/blog/post/2019-05-20-llvm-ve/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/2019-05-20-llvm-ve/</guid>
      <description>&lt;p&gt;We have released &lt;a href=&#34;https://github.com/sx-aurora-dev/llvm&#34;&gt;LLVM for Vector Engine&lt;/a&gt; on GitHub. The llvm-ve has been proposed to the llvm-dev ML: &lt;a href=&#34;http://lists.llvm.org/pipermail/llvm-dev/2019-April/131580.html&#34;&gt;[llvm-dev] [RFC] NEC SX-Aurora VE backend&lt;/a&gt;. As described in the proposal, current llvm-ve includes scalar code backend with &lt;a href=&#34;https://sx-aurora-dev.github.io/velintrin.html&#34;&gt;intrisic functions for vector instructions&lt;/a&gt;. Auto vectorization is not yet supported. We welcome your contribution!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Image Processing on Aurora</title>
      <link>https://sx-aurora-dev.github.io/blog/post/2019-05-15-imageprocessingsc18/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/2019-05-15-imageprocessingsc18/</guid>
      <description>We have presented several examples of image processing on Aurora at SC18 Exhibition. Some image processing kernels are memory bandwidth intensive because they use random memory access, for example, to access the pixels they are interested in. Aurora with world highest memory bandwidth (1.2TB/s) can fit such kernels.
Here is the performance comparison of some kernels from OpenCV.
We have also ported image processing applications to Aurora. See the poster for details.</description>
    </item>
    
    <item>
      <title>First post!</title>
      <link>https://sx-aurora-dev.github.io/blog/post/2019-05-10-first-post/</link>
      <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/post/2019-05-10-first-post/</guid>
      <description>We are pleased to start the blog. We are working for SX-Aurora for a couple of years. We want to share our experience for everyone knows more on SX-Aurora. We also have the github repositiry to priovide SW developed by us.
Our big brother is SX-Aurora Vector Engine blog. We have learned very much from him. You could also find useful things.
And you can visit Aurora Forum not only to get information on SX-Aurora but also to post your own article.</description>
    </item>
    
    <item>
      <title>About us</title>
      <link>https://sx-aurora-dev.github.io/blog/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sx-aurora-dev.github.io/blog/page/about/</guid>
      <description>Welcome to our blog. We work for NEC&amp;rsquo;s SX-Aurora TSUBASA. In this blog, we want to share our experience on Aurora.
The posts on this site reflect our personal views and not those of our employer. The same holds for colleagues and friends who occasionally contribute content.
If you have any comments or questions, please post to Aurora Forum.
Contributors Kazuhisa Ishizaka: Researcher in NEC Japan.</description>
    </item>
    
  </channel>
</rss>