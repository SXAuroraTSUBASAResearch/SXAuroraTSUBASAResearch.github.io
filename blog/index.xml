<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SX-Aurora TSUBASA</title>
    <link>https://sxauroratsubasaresearch.github.io/blog/</link>
    <description>Recent content on SX-Aurora TSUBASA</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 17 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sxauroratsubasaresearch.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Release LLVM for VE</title>
      <link>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-20-llvm-ve/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-20-llvm-ve/</guid>
      <description>&lt;p&gt;We have released &lt;a href=&#34;https://github.com/SXAuroraTSUBASAResearch/llvm&#34;&gt;LLVM for Vector Engine&lt;/a&gt; on GitHub. The llvm-ve has been proposed to the llvm-dev ML: &lt;a href=&#34;http://lists.llvm.org/pipermail/llvm-dev/2019-April/131580.html&#34;&gt;[llvm-dev] [RFC] NEC SX-Aurora VE backend&lt;/a&gt;. As described in the proposal, current llvm-ve includes scalar code backend with &lt;a href=&#34;https://sxauroratsubasaresearch.github.io/velintrin.html&#34;&gt;intrisic functions for vector instructions&lt;/a&gt;. Auto vectorization is not yet supported. We welcome your contribution!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Image Processing on Aurora</title>
      <link>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-15-imageprocessingsc18/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-15-imageprocessingsc18/</guid>
      <description>We have presented several examples of image processing on Aurora at SC18 Exhibition. Some image processing kernels are memory bandwidth intensive because they use random memory access, for example, to access the pixels they are interested in. Aurora with world highest memory bandwidth (1.2TB/s) can fit such kernels.
Here is the performance comparison of some kernels from OpenCV.
We have also ported image processing applications to Aurora. See the poster for details.</description>
    </item>
    
    <item>
      <title>First post!</title>
      <link>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-10-first-post/</link>
      <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-10-first-post/</guid>
      <description>We are pleased to start the blog. We are working for SX-Aurora for a couple of years. We want to share our experience for everyone knows more on SX-Aurora. We also have the github repositiry to priovide SW developed by us.
Our big brother is SX-Aurora Vector Engine blog. We have learned very much from him. You could also find useful things.
And you can visit Aurora Forum not only to get information on SX-Aurora but also to post your own article.</description>
    </item>
    
    <item>
      <title>About us</title>
      <link>https://sxauroratsubasaresearch.github.io/blog/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sxauroratsubasaresearch.github.io/blog/page/about/</guid>
      <description>Welcome to our blog. We work for NEC&amp;rsquo;s SX-Aurora TSUBASA. In this blog, we want to share our experience on Aurora.
If you have any comments or questions, please post to Aurora Forum.
Contributors Kazuhisa Ishizaka: Researcher in NEC Japan.</description>
    </item>
    
  </channel>
</rss>