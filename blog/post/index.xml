<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SX-Aurora TSUBASA</title>
    <link>https://sxauroratsubasaresearch.github.io/blog/post/</link>
    <description>Recent content in Posts on SX-Aurora TSUBASA</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 21 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sxauroratsubasaresearch.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ansible for Aurora</title>
      <link>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-21-ansible/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-21-ansible/</guid>
      <description>NEC provides RPM packages for SX-Aurora. If you feel its intallation is weird or not standard, visit VEOS yum Repository on the Web. Yes, yum repository for SX-Aurora is available!
And we have created ansible scripts to setup SX-Aurora using this yum repository. You can setup Aurora by few commands.
Instructions  Install CentOS7.5. Clone https://github.com/SXAuroraTSUBASAResearch/aurora-ansible. Write inventory file for ansible. Run ansible-playbook -i hosts.yaml -u root -k playbooks/aurora.yaml to install VEOS.</description>
    </item>
    
    <item>
      <title>Faster data transfer by VE DMA</title>
      <link>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-20-vedma/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-20-vedma/</guid>
      <description>On VE, you can use usual read(2) and write(2) to accesse file system or to transfer data through socket. But its speed is about 1GB/s at maximum in our experience. When we want to accelerate data transfer between VE and CPU, we use VE DMA. Since VE DMA has its own API for DMA, we have to rewrite a program. But we can reach 10GB/s.
Here is the result of our experiment.</description>
    </item>
    
    <item>
      <title>Release LLVM for VE</title>
      <link>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-20-llvm-ve/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-20-llvm-ve/</guid>
      <description>&lt;p&gt;We have released &lt;a href=&#34;https://github.com/SXAuroraTSUBASAResearch/llvm&#34;&gt;LLVM for Vector Engine&lt;/a&gt; on GitHub. The llvm-ve has been proposed to the llvm-dev ML: &lt;a href=&#34;http://lists.llvm.org/pipermail/llvm-dev/2019-April/131580.html&#34;&gt;[llvm-dev] [RFC] NEC SX-Aurora VE backend&lt;/a&gt;. As described in the proposal, current llvm-ve includes scalar code backend with &lt;a href=&#34;https://sxauroratsubasaresearch.github.io/velintrin.html&#34;&gt;intrisic functions for vector instructions&lt;/a&gt;. Auto vectorization is not yet supported. We welcome your contribution!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Image Processing on Aurora</title>
      <link>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-15-imageprocessingsc18/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-15-imageprocessingsc18/</guid>
      <description>We have presented several examples of image processing on Aurora at SC18 Exhibition. Some image processing kernels are memory bandwidth intensive because they use random memory access, for example, to access the pixels they are interested in. Aurora with world highest memory bandwidth (1.2TB/s) can fit such kernels.
Here is the performance comparison of some kernels from OpenCV.
We have also ported image processing applications to Aurora. See the poster for details.</description>
    </item>
    
    <item>
      <title>First post!</title>
      <link>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-10-first-post/</link>
      <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sxauroratsubasaresearch.github.io/blog/post/2019-05-10-first-post/</guid>
      <description>We are pleased to start the blog. We are working for SX-Aurora for a couple of years. We want to share our experience for everyone knows more on SX-Aurora. We also have the github repositiry to priovide SW developed by us.
Our big brother is SX-Aurora Vector Engine blog. We have learned very much from him. You could also find useful things.
And you can visit Aurora Forum not only to get information on SX-Aurora but also to post your own article.</description>
    </item>
    
  </channel>
</rss>